import subprocess
import time
import paramiko
import os

ping_interval = 10  
server_1_ip = "172.xx.xx.xx"  
server_2_ip = "172.xx.xx.xx"
aip_server_ip = "10.xx.xx.xxx"
username = "xxxxxxxxxxxxxxx"
password = "xxxxxxxxxxxxx"
aip_server_password = "xxxxxxxxxxxxx"
network_name = "Ethernet1" 
batch_file_server_1_restart = r'C:/batch_files/CV_Services_Restart.bat'
batch_file_server_2_start = r'C:/batch_files/CV_Service_Start.bat'
batch_file_server_2_stop = r'C:/batch_files/CV_Services_Stop.bat'
aip_server_1_restart = r'C:/Users/test_server/Desktop/aip_restart.bat'

def run_remote_batch(hostname, username, password, batch_file):
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname, username=username, password=password)
        command = f'cmd.exe /c {batch_file}'
        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode('utf-8')
        errors = stderr.read().decode('utf-8')
        client.close()
        return output, errors
    except Exception as e:
        return None, str(e)

def ping_server(server_ip):
    try:
        output = subprocess.check_output(f"ping -n 1 {server_ip}", shell=True, universal_newlines=True)
        if "Request timed out" in output or "unreachable" in output:
            print("Server 1 is Not Reachable")
            return False
        else:
            print("Server 1 is Reachable")
            return True
    except subprocess.CalledProcessError:
        print("Failed to run ping command")
        return False

def run_ssh_command(server_ip, username, password, command):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(server_ip, username=username, password=password)
        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode()
        error = stderr.read().decode()
        return output if output else error
    finally:
        ssh.close()

def run_local_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            return result.stderr
    except Exception as e:
        return str(e)

def enable_network_interface_on_server_1(network_name):
    command = f'netsh interface set interface "{network_name}" admin=enable'
    output = run_ssh_command(server_1_ip, username, password, command)
    print(f"Enabled network interface in: Server 1")

def disable_network_interface_on_server_1(network_name):
    command = f'netsh interface set interface "{network_name}" admin=disable'
    output = run_ssh_command(server_1_ip, username, password, command)
    print(f"Disabled network interface in: Server 1")

def enable_network_interface_on_server_2(network_name):
    run_local_command(f'netsh interface set interface "{network_name}" admin=enable')
    print(f"Enabled network interface in: Server 2")

def disable_network_interface_on_server_2(network_name):
    run_local_command(f'netsh interface set interface "{network_name}" admin=disable')
    print(f"Disabled network interface in: server 2")

def monitor_server():
    server_1_down = False
    while True:
        if ping_server(server_1_ip):
            if server_1_down:
                time.sleep(5)
                if ping_server(server_1_ip):
                    print("Server 1 is back online, switching IP back")
                    disable_network_interface_on_server_2(network_name)
                    print("CV server is stopping in server 2")
                    output, errors = run_remote_batch(server_2_ip, username, password, batch_file_server_2_stop)
                    print("Stopped CV server in server 2")
                    time.sleep(2)
                    enable_network_interface_on_server_1(network_name)
                    time.sleep(2)
                    disable_network_interface_on_server_1(network_name)
                    time.sleep(2)
                    enable_network_interface_on_server_1(network_name)
                    time.sleep(2)
                    print("CV server starting in server 1")
                    output, errors = run_remote_batch(server_1_ip, username, password, batch_file_server_1_restart)
                    print("Started CV server in server 1")
                    #time.sleep(2)
                    #print("aip restarting")
                    #small change need to add here
                    #print("aip restart done")
                    server_1_down = False
            else:
                print("Server 1 is online, everything is fine.")
        else:
            if not server_1_down:
                print("Server 1 is down, switching IP to Server 2")
                time.sleep(2)
                enable_network_interface_on_server_2(network_name)
                time.sleep(2)
                disable_network_interface_on_server_2(network_name)
                time.sleep(2)
                enable_network_interface_on_server_2(network_name)
                time.sleep(2)
                print("CV server starting in server 2")
                output, errors = run_remote_batch(server_2_ip, username, password, batch_file_server_2_start)
                print("Started CV server in server 2")
                #time.sleep(2)
                #print("aip restarting")
                #small change need to add here
                #print("aip restart done")
                server_1_down = True
            else:
                print("Server 1 is still down, Server 2 is serving the application.")
        time.sleep(ping_interval)

if __name__ == "__main__":
    while True:
        try:
            monitor_server()
        except Exception as e:
            print(f"An error occurred: {e}")
            print("Retrying...")
